---
import { getCollection } from 'astro:content';
import Layout from '../components/Layout.astro';
import StatCard from '../components/StatCard.astro';
import RaidTotalChart from '../components/RaidTotalChart.astro';
import RankingChart from '../components/RankingChart.astro';
import PlayerTable from '../components/PlayerTable.astro';
import RaidTable from '../components/RaidTable.astro';
import { PROJECT_CONFIG } from '../config/project.ts';
import type { RaidData, PlayerRaidEntry, PlayerStats } from '../types/raid.ts';
import '../styles/global.css';

const allRaids = await getCollection('raids');

const sortedRaids = allRaids.sort((a, b) => new Date(a.data.date).getTime() - new Date(b.data.date).getTime());

const allRaidData = sortedRaids.map(raid => ({
  date: raid.data.date,
  file: raid.data.filename,
  data: raid.data.players.map(player => ({
    ...player,
    raidDate: raid.data.date
  }))
}));

// Server-side calculations
function calculatePlayerStats(raidData: RaidData[]): PlayerStats[] {
  const playerStats = new Map();
  
  // Get the last 5 raids for more recent analysis
  const last5Raids = raidData.slice(-5);
  
  // Only collect players from last 5 raids (not all raids)
  const allPlayers = new Set();
  last5Raids.forEach(raid => {
    raid.data.forEach(player => {
      allPlayers.add(player.allycode);
    });
  });

  allPlayers.forEach(allycode => {
    const playerRaids: PlayerRaidEntry[] = [];
    const playerLast5Raids: PlayerRaidEntry[] = [];
    let name = '';
    
    // Process all raids for historical data
    raidData.forEach(raid => {
      const playerData = raid.data.find(p => p.allycode === allycode);
      if (playerData) {
        name = playerData.name;
        playerRaids.push({
          date: raid.date,
          score: playerData.lastActualScore,
          participated: playerData.participated,
          estimatedScore: playerData.estimatedScore
        });
      } else {
        playerRaids.push({
          date: raid.date,
          score: 0,
          participated: false,
          estimatedScore: 0
        });
      }
    });
    
    // Process last 5 raids for current performance metrics
    last5Raids.forEach(raid => {
      const playerData = raid.data.find(p => p.allycode === allycode);
      if (playerData) {
        name = playerData.name;
        playerLast5Raids.push({
          date: raid.date,
          score: playerData.lastActualScore,
          participated: playerData.participated,
          estimatedScore: playerData.estimatedScore
        });
      }
      // Don't add entry if player was not in guild at that time
    });

    // Calculate statistics based on last 5 raids (only raids where player was in guild)
    const totalRaids = last5Raids.length;
    const playerRaidEntries = playerLast5Raids.length; // Actual raids where player was in guild
    const participatedRaids = playerLast5Raids.filter(r => r.participated).length;
    const participationRate = playerRaidEntries > 0 ? (participatedRaids / playerRaidEntries) * 100 : 0;
    const totalScore = playerLast5Raids.reduce((sum, r) => sum + r.score, 0);
    const avgScore = participatedRaids > 0 ? totalScore / participatedRaids : 0;
    
    // Calculate average estimate from raids where estimatedScore > 0 (not just participated ones)
    const raidsWithEstimate = playerLast5Raids.filter(r => r.estimatedScore > 0);
    const avgEstimate = raidsWithEstimate.length > 0 ? 
      raidsWithEstimate.reduce((sum, r) => sum + r.estimatedScore, 0) / raidsWithEstimate.length : 0;
    
    const bestScore = playerLast5Raids.length > 0 ? Math.max(...playerLast5Raids.map(r => r.score)) : 0;
    const maxEstimated = playerLast5Raids.length > 0 ? Math.max(...playerLast5Raids.map(r => r.estimatedScore)) : 0;
    
    // Calculate efficiency (actual vs estimated)
    const totalEstimated = playerLast5Raids.reduce((sum, r) => sum + (r.participated ? r.estimatedScore : 0), 0);
    const efficiency = totalEstimated > 0 ? (totalScore / totalEstimated) * 100 : 0;
    
    // Calculate last activity from all raids
    const activeRaids = playerRaids.filter(r => r.participated);
    const lastActivity = activeRaids.length === 0 ? 'Never' : activeRaids[activeRaids.length - 1].date;
    
    // Calculate last score from last 5 raids
    const activeLast5Scores = playerLast5Raids.filter(r => r.participated && r.score > 0);
    const lastScore = activeLast5Scores.length > 0 ? activeLast5Scores[activeLast5Scores.length - 1].score : 0;
    
    // Calculate trend: Compare last raid score with average of last 5 raids
    let trend = 'No Data';
    const activeLast5 = playerLast5Raids.filter(r => r.participated && r.score > 0);
    if (activeLast5.length >= 3) {
      // Get the average of all last 5 raids
      const avgLast5 = activeLast5.reduce((sum, r) => sum + r.score, 0) / activeLast5.length;
      
      // Get the most recent raid score
      const lastRaidScore = activeLast5[activeLast5.length - 1].score;
      
      // Calculate percentage difference
      const percentDiff = ((lastRaidScore - avgLast5) / avgLast5) * 100;
      
      // Classify trend based on percentage difference (using 10% threshold)
      if (percentDiff > 10) trend = 'Rising';
      else if (percentDiff < -10) trend = 'Falling';
      else trend = 'Stable';
    }

    // Only include players who appeared in at least one of the last 5 raids
    if (playerLast5Raids.length > 0) {
      playerStats.set(allycode, {
        name: name,
        allycode: allycode,
        participation: participationRate,
        raidsParticipated: participatedRaids,
        totalRaids: totalRaids,
        totalScore: totalScore,
        avgScore: avgScore,
        avgEstimate: avgEstimate,
        bestScore: bestScore,
        maxEstimated: maxEstimated,
        lastScore: lastScore,
        efficiency: efficiency,
        lastActivity: lastActivity,
        trend: trend,
        raids: playerRaids, // Keep all raids for detailed table
        last5Raids: playerLast5Raids // Add last 5 raids data
      });
    }
  });
  
  return Array.from(playerStats.values());
}

// Calculate statistics server-side
const playerStatsArray = allRaidData.length > 0 ? calculatePlayerStats(allRaidData) : [];
const totalRaids = allRaidData.length;
const last5RaidsCount = Math.min(5, totalRaids);
const activePlayers = playerStatsArray.length;
const avgParticipation = activePlayers > 0 
  ? (playerStatsArray.reduce((sum, p) => sum + p.participation, 0) / activePlayers).toFixed(1)
  : '0.0';
const avgEfficiency = activePlayers > 0 
  ? (playerStatsArray.reduce((sum, p) => sum + p.efficiency, 0) / activePlayers).toFixed(1)
  : '0.0';
const lastRaidDate = totalRaids > 0 ? allRaidData[allRaidData.length - 1].date : '-';

const baseUrl = PROJECT_CONFIG.baseUrl;
---

<Layout title={`${PROJECT_CONFIG.title} - SWGoH`}>
  {totalRaids > 0 ? (
    <>
      <div class="text-center mb-4">
        <div class="inline-block bg-cyan-500/20 border border-cyan-500/30 rounded-lg px-4 py-2">
          <span class="text-cyan-400 font-semibold">ðŸ“Š Analysis based on last {last5RaidsCount} raids</span>
        </div>
      </div>
      
      <div class="grid grid-cols-2 sm:grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-5 mb-6 sm:mb-8 mobile-stat-grid">
        <StatCard title="Last 5 Raids" value={last5RaidsCount.toString()} id="last5Raids" />
        <StatCard title="Active Players" value={activePlayers.toString()} id="activePlayers" />
        <StatCard title="Avg Participation" value={`${avgParticipation}%`} id="avgParticipation" />
        <StatCard title="Avg Efficiency" value={`${avgEfficiency}%`} id="avgEfficiency" />
      </div>

      <div class="grid grid-cols-1 gap-6 sm:gap-10 mb-6 sm:mb-8">
        <RaidTotalChart raidData={allRaidData} />
        <RankingChart raidData={allRaidData} />
      </div>

      <PlayerTable allPlayerStats={playerStatsArray} />
      <RaidTable allPlayerStats={playerStatsArray} raidData={allRaidData} />
    </>
  ) : (
    <div class="text-center py-12">
      <div class="text-6xl mb-6">ðŸš€</div>
      <h2 class="text-2xl font-bold text-cyan-400 mb-4">No Raid Data Found</h2>
      <div class="text-gray-300 mb-8 space-y-4">
        <p class="text-lg">To get started, you need to export your raid data from Wookiebot.</p>
        
        <div class="bg-gray-800/50 rounded-lg p-6 max-w-2xl mx-auto">
          <h3 class="text-cyan-400 font-semibold mb-3">ðŸ“‹ How to get your data:</h3>
          <ol class="text-left space-y-2 text-sm">
            <li><strong>1.</strong> Go to your guild's Discord server</li>
            <li><strong>2.</strong> Use the command: <code class="bg-gray-700 px-2 py-1 rounded text-cyan-300">/raid guild</code></li>
            <li><strong>3.</strong> Download the CSV file from Wookiebot</li>
            <li><strong>4.</strong> In your GitHub repository, go to the <code class="bg-gray-700 px-2 py-1 rounded text-cyan-300">data/</code> folder</li>
            <li><strong>5.</strong> Click <strong>"Add file" â†’ "Upload files"</strong></li>
            <li><strong>6.</strong> Upload your CSV file and commit the changes</li>
            <li><strong>7.</strong> GitHub Actions will automatically build and deploy your updated site</li>
          </ol>
        </div>
        
        <div class="mt-6">
          <a href={`${baseUrl}help/`} class="btn-primary inline-flex items-center gap-2">
            ðŸ“š View Detailed Help Guide
          </a>
        </div>
      </div>
    </div>
  )}

  {totalRaids > 0 && (
    <script define:vars={{ baseUrl }}>
    function showError(message) {
      const errorDiv = document.getElementById('error');
      errorDiv.textContent = message;
      errorDiv.classList.remove('hidden');
    }
    </script>
  )}
</Layout>
