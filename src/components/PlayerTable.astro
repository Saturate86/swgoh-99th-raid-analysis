---
import type { PlayerStats } from '../types/raid.ts';

interface Props {
  allPlayerStats: PlayerStats[];
}

const { allPlayerStats } = Astro.props;

// Helper functions
function formatNumber(num: number): string {
  if (num === 0) return '-';
  return new Intl.NumberFormat('de-DE').format(Math.round(num));
}

function getParticipationClass(participation: number): string {
  if (participation >= 80) return 'participation-excellent';
  if (participation >= 50) return 'participation-good';
  return 'participation-poor';
}

function getEfficiencyClass(efficiency: number): string {
  if (efficiency >= 100) return 'efficiency-excellent';
  if (efficiency >= 80) return 'efficiency-good';
  return 'efficiency-poor';
}

function getTrendClass(trend: string): string {
  if (trend === 'Rising') return 'trend-positive';
  if (trend === 'Falling') return 'trend-negative';
  if (trend === 'Stable') return 'trend-stable';
  return '';
}

// Sort players by name ascending by default
const sortedPlayers = [...allPlayerStats].sort((a, b) => a.name.localeCompare(b.name));
---

<div class="glass-card p-3 sm:p-5 mt-6 sm:mt-8">
  <h2 class="text-heading mb-3 sm:mb-5 text-center text-sm sm:text-xl">ðŸ“‹ Player Statistics Overview</h2>
  <div class="mobile-scroll-hint">ðŸ‘ˆ Swipe to see more columns</div>
  <div class="overflow-x-auto mobile-table-wrapper">
    <table id="playersTable" class="w-full border-collapse text-xs sm:text-sm">
      <thead>
        <tr>
          <th onclick="sortTable('name')" class="raid-table-header raid-table-header-sticky cursor-pointer hover:bg-orange-400/30 select-none">
            Player Name <span id="sort-name" class="sort-indicator">â–²</span>
          </th>
          <th onclick="sortTable('allycode')" class="raid-table-header cursor-pointer hover:bg-orange-400/30 select-none">
            Ally Code <span id="sort-allycode" class="sort-indicator">â–²</span>
          </th>
          <th onclick="sortTable('participation')" class="raid-table-header cursor-pointer hover:bg-orange-400/30 select-none">
            Participation % <span id="sort-participation" class="sort-indicator">â–¼</span>
          </th>
          <th onclick="sortTable('raidsParticipated')" class="raid-table-header cursor-pointer hover:bg-orange-400/30 select-none">
            Raids (Last 5) <span id="sort-raidsParticipated" class="sort-indicator">â–¼</span>
          </th>
          <th onclick="sortTable('avgEstimate')" class="raid-table-header cursor-pointer hover:bg-orange-400/30 select-none">
            Avg Estimate <span id="sort-avgEstimate" class="sort-indicator">â–¼</span>
          </th>
          <th onclick="sortTable('bestScore')" class="raid-table-header cursor-pointer hover:bg-orange-400/30 select-none">
            Best Score <span id="sort-bestScore" class="sort-indicator">â–¼</span>
          </th>
          <th onclick="sortTable('lastScore')" class="raid-table-header cursor-pointer hover:bg-orange-400/30 select-none">
            Last Score <span id="sort-lastScore" class="sort-indicator">â–¼</span>
          </th>
          <th onclick="sortTable('efficiency')" class="raid-table-header cursor-pointer hover:bg-orange-400/30 select-none">
            Efficiency % <span id="sort-efficiency" class="sort-indicator">â–¼</span>
          </th>
          <th onclick="sortTable('trend')" class="raid-table-header cursor-pointer hover:bg-orange-400/30 select-none">
            Trend <span id="sort-trend" class="sort-indicator">â–²</span>
          </th>
        </tr>
      </thead>
      <tbody id="playersTableBody">
        {sortedPlayers.map((player) => (
          <tr class="raid-table-row">
            <td class="raid-table-cell raid-table-cell-sticky">{player.name}</td>
            <td class="raid-table-cell">{player.allycode}</td>
            <td class={`raid-table-cell ${getParticipationClass(player.participation)}`}>
              {player.participation.toFixed(1)}%
            </td>
            <td class="raid-table-cell">
              {player.raidsParticipated}/{player.totalRaids}
            </td>
            <td class="raid-table-cell">{formatNumber(player.avgEstimate)}</td>
            <td class="raid-table-cell">{formatNumber(player.bestScore)}</td>
            <td class="raid-table-cell">{formatNumber(player.lastScore)}</td>
            <td class={`raid-table-cell ${getEfficiencyClass(player.efficiency)}`}>
              {player.efficiency.toFixed(1)}%
            </td>
            <td class={`raid-table-cell ${getTrendClass(player.trend)}`}>
              {player.trend}
            </td>
          </tr>
        ))}
      </tbody>
    </table>
  </div>
</div>

<script define:vars={{ allPlayerStats }}>
  let filteredData = [...allPlayerStats];
  
  // Load saved sort state from localStorage
  const savedSort = localStorage.getItem('playerTableSort');
  let currentSort = savedSort 
    ? JSON.parse(savedSort) 
    : { column: 'name', direction: 'asc' };

  function formatNumber(num) {
    if (num === 0) return '-';
    return new Intl.NumberFormat('de-DE').format(Math.round(num));
  }

  function saveSortState() {
    localStorage.setItem('playerTableSort', JSON.stringify(currentSort));
  }

  function updateSortIndicators() {
    // Show all indicators with default direction
    document.querySelectorAll('.sort-indicator').forEach(indicator => {
      const column = indicator.id.replace('sort-', '');
      
      // Remove active class from all
      indicator.classList.remove('active');
      
      if (column === currentSort.column) {
        // Active column shows current direction
        indicator.textContent = currentSort.direction === 'desc' ? 'â–¼' : 'â–²';
        indicator.classList.add('active');
      } else {
        // Inactive columns show default direction
        if (column === 'name' || column === 'allycode' || column === 'trend') {
          indicator.textContent = 'â–²'; // Default ascending for text columns
        } else {
          indicator.textContent = 'â–¼'; // Default descending for numeric columns
        }
      }
    });
  }

  function applyFilters() {
    // Use all player stats directly (no filtering)
    filteredData = [...allPlayerStats];
    applySortWithoutToggle(currentSort.column);
    updatePlayerTable();
    updateSortIndicators();
  }

  function applySortWithoutToggle(criteria) {
    // Apply sort without toggling direction (for initialization)
    const multiplier = currentSort.direction === 'desc' ? -1 : 1;

    filteredData.sort((a, b) => {
      let comparison = 0;
      
      switch (criteria) {
        case 'name':
          comparison = a.name.localeCompare(b.name);
          break;
        case 'allycode':
          comparison = a.allycode.localeCompare(b.allycode);
          break;
        case 'participation':
          comparison = a.participation - b.participation;
          break;
        case 'raidsParticipated':
          comparison = a.raidsParticipated - b.raidsParticipated;
          break;
        case 'totalScore':
          comparison = a.totalScore - b.totalScore;
          break;
        case 'avgEstimate':
          comparison = a.avgEstimate - b.avgEstimate;
          break;
        case 'bestScore':
          comparison = a.bestScore - b.bestScore;
          break;
        case 'lastScore':
          comparison = a.lastScore - b.lastScore;
          break;
        case 'efficiency':
          comparison = a.efficiency - b.efficiency;
          break;
        case 'trend':
          comparison = a.trend.localeCompare(b.trend);
          break;
        case 'lastActivity':
          comparison = new Date(a.lastActivity).getTime() - new Date(b.lastActivity).getTime();
          break;
        default:
          comparison = a.participation - b.participation;
      }
      
      return comparison * multiplier;
    });
  }

  function sortData(criteria) {
    // Toggle direction if same column
    if (currentSort.column === criteria) {
      currentSort.direction = currentSort.direction === 'desc' ? 'asc' : 'desc';
    } else {
      currentSort.column = criteria;
      // Default direction for different column types
      if (criteria === 'name' || criteria === 'allycode' || criteria === 'trend') {
        currentSort.direction = 'asc';
      } else {
        currentSort.direction = 'desc';
      }
    }

    // Save sort state
    saveSortState();

    applySortWithoutToggle(criteria);
  }

  function updatePlayerTable() {
    const tbody = document.getElementById('playersTableBody');
    tbody.innerHTML = '';

    filteredData.forEach(player => {
      const row = document.createElement('tr');
      row.className = 'raid-table-row';
      
      let participationClass = '';
      if (player.participation >= 80) participationClass = 'participation-excellent';
      else if (player.participation >= 50) participationClass = 'participation-good';
      else participationClass = 'participation-poor';

      let efficiencyClass = '';
      if (player.efficiency >= 100) efficiencyClass = 'efficiency-excellent';
      else if (player.efficiency >= 80) efficiencyClass = 'efficiency-good';
      else efficiencyClass = 'efficiency-poor';

      let trendClass = '';
      if (player.trend === 'Rising') trendClass = 'trend-positive';
      else if (player.trend === 'Falling') trendClass = 'trend-negative';
      else if (player.trend === 'Stable') trendClass = 'trend-stable';

      row.innerHTML = `
        <td class="raid-table-cell raid-table-cell-sticky">${player.name}</td>
        <td class="raid-table-cell">${player.allycode}</td>
        <td class="raid-table-cell ${participationClass}">${player.participation.toFixed(1)}%</td>
        <td class="raid-table-cell">${player.raidsParticipated}/${player.totalRaids}</td>
        <td class="raid-table-cell">${formatNumber(player.avgEstimate)}</td>
        <td class="raid-table-cell">${formatNumber(player.bestScore)}</td>
        <td class="raid-table-cell">${formatNumber(player.lastScore)}</td>
        <td class="raid-table-cell ${efficiencyClass}">${player.efficiency.toFixed(1)}%</td>
        <td class="raid-table-cell ${trendClass}">${player.trend}</td>
      `;
      tbody.appendChild(row);
    });
  }

  function sortTable(column) {
    sortData(column);
    updatePlayerTable();
    updateSortIndicators();
  }

  // Initialize with default sort and indicators
  applyFilters();
  
  // Initialize indicators on page load
  document.addEventListener('DOMContentLoaded', function() {
    updateSortIndicators();
  });

  // Make functions globally available
  window.applyFilters = applyFilters;
  window.sortTable = sortTable;
</script>
